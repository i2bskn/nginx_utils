{"name":"NginxUtils","tagline":"Nginx utilities.","body":"## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n```ruby\r\ngem 'nginx_utils'\r\n```\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install nginx_utils\r\n\r\n## Usage\r\n\r\nFrom console:\r\n\r\n    $ nginx_utils [status|logrotate] [options]\r\n    Commands:\r\n    nginx_utils help [COMMAND]      # Describe available commands or one specific command\r\n    nginx_utils logrotate -d        # Nginx logrotate\r\n    nginx_utils status example.com  # Print status of Nginx\r\n\r\n    $ nginx_utils status\r\n    Active Connections: 1\r\n    Accepts: 4 Handled: 5 Requests: 51\r\n    Reading: 1 Writing: 3 Waiting: 2\r\n\r\n    $ nginx_utils logrotate\r\n\r\nFrom ruby:\r\n\r\n```ruby\r\nrequire 'nginx_utils'\r\n```\r\n\r\n### Logrotate\r\n\r\nLogs of rename target: `Dir.glob \"#{root_dir}/**/#{target_logs}\"`\r\nLogs of delete target: `Dir.glob \"#{root_dir}/**/#{target_logs}.*\"`\r\n\r\n```ruby\r\n# Following parameters are default.\r\nparams = {\r\n  debug: false,\r\n  script_log: \"/tmp/nginx_rotate.log\",\r\n  log_level: :debug,\r\n  root_dir: \"/usr/local/nginx\",\r\n  target_logs: \"*.log\",\r\n  prefix: Time.now.strftime(\"%Y%m%d%H%M%S\"),\r\n  retention: 90,\r\n  pid_file: \"/usr/local/nginx/logs/nginx.pid\"\r\n}\r\n\r\nrotate = NginxUtils::Logrotate.new(params)\r\n# == Configure\r\n# rotate.config log_level: :worn\r\n\r\n# == Accessor\r\n# rotate.logger.formatter = proc { |severity, datetime, progname, msg|\r\n#   \"#{datetime}: #{msg}\\n\"\r\n# }\r\n# rotate.rename_logs << add_rename_log\r\n# rotate.delete_logs << add_delete_log\r\n\r\nrotate.execute\r\n```\r\n\r\nOptions that can be specified:\r\n\r\n* `:debug` => `true` or `false`. If `:debug` is true, it is not execute.\r\n* `:script_log` => `\"/path/to/nginx_rotate.log\"`. If `:script` is false, do not output logs.\r\n* `:log_level` => `:debug` or `:info` or `:warn` or `:error` or `:fatal`.\r\n* `:root_dir` => `\"/path/to/nginx\"`. Root directory of Nginx.\r\n* `:target_logs` => `\"*.log\"`. Specify logs of target.\r\n* `:prefix` => `Time.now.strftime(\"%Y%m%d%H%M%S\")`. Prefix use to rename.\r\n* `:retention` => `90`. Specify in days the retention period of log.\r\n* `:pid_file` => `\"/path/to/nginx.pid\"`. Use to restart Nginx.\r\n\r\n### Status\r\n\r\nRequire **HttpStubStatusModule**.\r\n\r\n```ruby\r\n# http://localhost/nginx_status\r\nNginxUtils::Status.get # => {active_connection: 1, accepts: 4, handled: 5, requests: 51, reading: 1, writing: 3, waiting: 2}\r\n\r\n# Apache like\r\n# http://example.com/server-status\r\nNginxUtils::Status.get(host: \"example.com\", path: \"/server-status\")\r\n```\r\n\r\n### Logreader\r\n\r\nLTSV:\r\n\r\nThe default format is `:ltsv`.\r\n\r\n```ruby\r\nlog_file = \"/path/to/nginx/logs/access.log.ltsv\"\r\nreader = NginxUtils::Logreader.new(log_file)\r\nreader.each do |line|\r\n  p line # => {time: \"2013-05-19T08:13:14+00:00\", host: \"192.168.1.10\", ...}\r\nend\r\n```\r\n\r\nCombined:\r\n\r\n```ruby\r\nlog_file = \"/path/to/nginx/logs/access.log.combined\"\r\nreader = NginxUtils::Logreader.new(log_file, format: :combined)\r\nreader.each {|line| p line} # => {:remote_addr=>\"x.x.x.x\", :remote_user=>\"-\", :time_local=>\"19/May/2013:23:14:04 +0900\", :request=>\"GET / HTTP/1.1\", :status=>\"200\", :body_bytes_sent=>\"564\", :http_referer=>\"-\", :http_user_agent=>\"-\"}\r\n```\r\n\r\nCustom:\r\n\r\n```ruby\r\nlog_file = \"/path/to/nginx/logs/access.log.combined\"\r\nparser = /\\[(.*)\\]\\s\"(.*?)\"/\r\nreader = NginxUtils::Logreader.new(log_file, parser: parser)\r\nreader.each {|line| p line.first} #=> [\"19/May/2013:23:13:52 +0900\", \"GET / HTTP/1.1\"]\r\n```\r\n\r\nOptions that can be specified:\r\n\r\n* `:format` => `:ltsv` or `:combined`. If parser is specified, format is automatically `:custom`.\r\n* `:parser` => Parse with `String#scan`. Specified in Regexp.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}